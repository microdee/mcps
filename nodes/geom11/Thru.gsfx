
#define USUAL "SV_Position.xyz;NORMAL.xyz;TEXCOORD0.xy"
#define GEOMVEL "SV_Position.xyz;NORMAL.xyz;TEXCOORD0.xy;COLOR0"
#define SKINNING "SV_Position.xyz;NORMAL.xyz;TEXCOORD0.xy;BLENDINDICES;BLENDWEIGHT;COLOR0"

struct VsInUsual
{
	float4 cpoint : POSITION;
	float3 norm : NORMAL;
	float4 TexCd : TEXCOORD0;
};
struct VsOutUsual
{
	float4 cpoint : SV_Position;
	float3 norm : NORMAL;
	float4 TexCd : TEXCOORD0;
};
VsOutUsual VsUsual(VsInUsual input)
{
    VsOutUsual output;
	
    output.cpoint = input.cpoint;
	output.norm = input.norm;
	output.TexCd = input.TexCd;
	
    return output;
}
[maxvertexcount(3)]
void GsUsual(triangle VsOutUsual input[3], inout TriangleStream<VsOutUsual>GSOut)
{
	VsOutUsual v;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		//v.position=v.position;
        //v.TexCd=v.TexCd;
		//v.normV=v.normV;
		GSOut.Append(v);
	}
}
GeometryShader StreamUsual = ConstructGSWithSO( CompileShader( gs_5_0, GsUsual() ), USUAL );
technique11 UsualLayout
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VsUsual() ) );
		SetGeometryShader( CompileShader( gs_5_0, GsUsual() ) );
	    SetGeometryShader( StreamUsual );

	}
}

////////////////////////////////////////////

struct VsInGeomvel
{
	float4 cpoint : POSITION;
	float3 norm : NORMAL;
	float4 TexCd : TEXCOORD0;
	float4 ppos : COLOR0;
};
struct VsOutGeomvel
{
	float4 cpoint : SV_Position;
	float3 norm : NORMAL;
	float4 TexCd : TEXCOORD0;
	float4 ppos : COLOR0;
};
VsOutGeomvel VsGeomvel(VsInGeomvel input)
{
    VsOutGeomvel output;
    output.cpoint = input.cpoint;
	output.norm = input.norm;
	output.TexCd = input.TexCd;
	output.ppos = input.ppos;
	
    return output;
}
[maxvertexcount(3)]
void GsGeomvel(triangle VsOutGeomvel input[3], inout TriangleStream<VsOutGeomvel>GSOut)
{
	VsOutGeomvel v;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		//v.position=v.position;
        //v.TexCd=v.TexCd;
		//v.normV=v.normV;
		GSOut.Append(v);
	}
}
GeometryShader StreamGeomvel = ConstructGSWithSO( CompileShader( gs_5_0, GsGeomvel() ), GEOMVEL );
technique11 GeomvelLayout
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VsGeomvel() ) );
		SetGeometryShader( CompileShader( gs_5_0, GsGeomvel() ) );
	    SetGeometryShader( StreamGeomvel );

	}
}

////////////////////////////////////////////

struct VsInSkinning
{
	float4 cpoint : POSITION;
	float3 norm : NORMAL;
	float4 TexCd : TEXCOORD0;
	float4 blendid : BLENDINDICES;
	float4 blendw : BLENDWEIGHT;
	float4 ppos : COLOR0;
};
struct VsOutSkinning
{
	float4 cpoint : SV_Position;
	float3 norm : NORMAL;
	float4 TexCd : TEXCOORD0;
	float4 blendid : BLENDINDICES;
	float4 blendw : BLENDWEIGHT;
	float4 ppos : COLOR0;
};
VsOutSkinning VsSkinning(VsInSkinning input)
{
    VsOutSkinning output;
    output.cpoint = input.cpoint;
	output.norm = input.norm;
	output.TexCd = input.TexCd;
	output.blendid = input.blendid;
	output.blendw = input.blendw;
	output.ppos = input.ppos;
	
    return output;
}
[maxvertexcount(3)]
void GsSkinning(triangle VsOutSkinning input[3], inout TriangleStream<VsOutSkinning>GSOut)
{
	VsOutSkinning v;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		//v.position=v.position;
        //v.TexCd=v.TexCd;
		//v.normV=v.normV;
		GSOut.Append(v);
	}
}
GeometryShader StreamSkinning = ConstructGSWithSO( CompileShader( gs_5_0, GsSkinning() ), SKINNING );
technique11 SkinningLayout
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VsSkinning() ) );
		SetGeometryShader( CompileShader( gs_5_0, GsSkinning() ) );
	    SetGeometryShader( StreamSkinning );

	}
}