#define PI 3.1415926535897932
#define GEOMVEL "SV_Position.xyz;NORMAL.xyz;TEXCOORD0.xy;COLOR0"
// mcps

StructuredBuffer<float> McpsData;
StructuredBuffer<float> PrevMcpsData;
float ElementSize = 28;
/*
size	offset	name		note
3		0		position	
3		3		velocity
3		6		force
4		9		color
1		13		size		Radius1
2		14		age			
1		16		ID
ext:
4		17		Rotation	Quaternion
1		21		Radius2
1		22		Thickness	
1		23		Depth
1		24		Cycles
1		25		Phase
1		26		Power
1		27		Curvature
Vcnt	28		dOffset
Vcnt	28+Vcnt	zOffset
*/
float3 mcps_position(StructuredBuffer<float> mcps, uint i, uint s) {return float3(mcps[i*s+0],mcps[i*s+1],mcps[i*s+2]);}
float3 mcps_velocity(StructuredBuffer<float> mcps, uint i, uint s) {return float3(mcps[i*s+3],mcps[i*s+4],mcps[i*s+5]);}
float3 mcps_force(StructuredBuffer<float> mcps, uint i, uint s) {return float3(mcps[i*s+6],mcps[i*s+7],mcps[i*s+8]);}
float4 mcps_color(StructuredBuffer<float> mcps, uint i, uint s) {return float4(mcps[i*s+9],mcps[i*s+10],mcps[i*s+11],mcps[i*s+12]);}
float mcps_size(StructuredBuffer<float> mcps, uint i, uint s) {return mcps[i*s+13];}
float2 mcps_age(StructuredBuffer<float> mcps, uint i, uint s) {return float2(mcps[i*s+14],mcps[i*s+15]);}
float mcps_ID(StructuredBuffer<float> mcps, uint i, uint s) {return mcps[i*s+16];}
//ext:
float4 mcps_Rotation(StructuredBuffer<float> mcps, uint i, uint s) {return float4(mcps[i*s+17],mcps[i*s+18],mcps[i*s+19],mcps[i*s+20]);}
float mcps_Radius2(StructuredBuffer<float> mcps, uint i, uint s) {return mcps[i*s+21];}
float mcps_Thickness(StructuredBuffer<float> mcps, uint i, uint s) {return mcps[i*s+22];}
float mcps_Depth(StructuredBuffer<float> mcps, uint i, uint s) {return mcps[i*s+23];}
float mcps_Cycles(StructuredBuffer<float> mcps, uint i, uint s) {return mcps[i*s+24];}
float mcps_Phase(StructuredBuffer<float> mcps, uint i, uint s) {return mcps[i*s+25];}
float mcps_Power(StructuredBuffer<float> mcps, uint i, uint s) {return mcps[i*s+26];}
float mcps_Curvature(StructuredBuffer<float> mcps, uint i, uint s) {return mcps[i*s+27];}
float mcps_dOffset(StructuredBuffer<float> mcps, uint i, uint s, uint vi) {return mcps[i*s+28+vi];}
float mcps_zOffset(StructuredBuffer<float> mcps, uint i, uint s, uint vi, uint vs) {return mcps[i*s+28+vs+vi];}

StructuredBuffer<float> Linear;

struct VsOutGeomvel
{
	float4 cpoint : SV_Position;
	float3 norm : NORMAL;
	float TexCd : TEXCOORD0;
	float4 ppos : COLOR0;
	float3 bufferdata : TEXCOORD1;
};
float PowS(float a, float b)
{
	return pow(abs(a),b)*sign(a);
}
VsOutGeomvel VsGeomvel(uint vi: SV_VertexID, uint ii: SV_InstanceID)
{
    VsOutGeomvel output;
	uint LinearCount, LinearStr;
	Linear.GetDimensions(LinearCount, LinearStr);
	
	float elsize = ElementSize+LinearCount*2;
	
	//// current ////
	
	float3 circpos = 0;
	float d = mcps_size(McpsData, ii, elsize) + mcps_dOffset(McpsData, ii, elsize, vi);
	float phase = mcps_Phase(McpsData, ii, elsize);
	float cycles = mcps_Cycles(McpsData, ii, elsize);
	float r = Linear[vi]*PI*cycles*2+phase*2*PI;
	circpos.x = lerp(PowS(cos(r),mcps_Power(McpsData, ii, elsize))*d, Linear[vi]-.5, mcps_Curvature(McpsData, ii, elsize));
	circpos.y = lerp(PowS(sin(r),mcps_Power(McpsData, ii, elsize))*d, 0, mcps_Curvature(McpsData, ii, elsize));
	circpos.z = mcps_zOffset(McpsData, ii, elsize, vi, LinearCount);
	float3 norm = 0;
	norm.x = lerp(cos(r), 0, mcps_Curvature(McpsData, ii, elsize));
	norm.y = lerp(sin(r), -1, mcps_Curvature(McpsData, ii, elsize));
	
	//// previous ////
	float3 pcircpos = 0;
	float pd = mcps_size(PrevMcpsData, ii, elsize) + mcps_dOffset(PrevMcpsData, ii, elsize, vi);
	float pphase = mcps_Phase(PrevMcpsData, ii, elsize);
	float pcycles = mcps_Cycles(PrevMcpsData, ii, elsize);
	float pr = Linear[vi]*PI*pcycles*2+pphase*2*PI;
	pcircpos.x = lerp(PowS(cos(pr),mcps_Power(PrevMcpsData, ii, elsize))*pd, Linear[vi]-.5, mcps_Curvature(PrevMcpsData, ii, elsize));
	pcircpos.y = lerp(PowS(sin(pr),mcps_Power(PrevMcpsData, ii, elsize))*pd, 0, mcps_Curvature(PrevMcpsData, ii, elsize));
	pcircpos.z = mcps_zOffset(PrevMcpsData, ii, elsize, vi, LinearCount);
	
	//// out ////
	
    output.cpoint = float4(circpos,1);
	output.norm = norm;
	output.TexCd = Linear[vi];
	output.ppos = float4(pcircpos,ii);
	output.bufferdata = float3(elsize, LinearCount, vi);
	
    return output;
}

struct GsOutGeomvel
{
	float4 cpoint : SV_Position;
	float3 norm : NORMAL;
	float4 TexCd : TEXCOORD0;
	float4 ppos : COLOR0;
};

struct GStmp
{
	float3 pos;
	float2 txcd;
};
float4x4 QRotate(float4 q)
{
	float4x4 mat = {
		1,0,0,0,
		0,1,0,0,
		0,0,1,0,
		0,0,0,1};
	mat[0][0] = 1 - 2*q.y*q.y - 2*q.z*q.z;
	mat[0][1] = 2*q.x*q.y + 2*q.w*q.z;
	mat[0][2] = 2*q.x*q.z - 2*q.w*q.y;
	mat[1][0] = 2*q.x*q.y - 2*q.w*q.z;
	mat[1][1] = 1 - 2*q.x*q.x - 2*q.z*q.z;
	mat[1][2] = 2*q.y*q.z + 2*q.w*q.x;
	mat[2][0] = 2*q.x*q.z + 2*q.w*q.y;
	mat[2][1] = 2*q.y*q.z - 2*q.w*q.x;
	mat[2][2] = 1 - 2*q.x*q.x - 2*q.y*q.y;
	return mat;
}
[maxvertexcount(14)]
void GsGeomvel(line VsOutGeomvel input[2], inout TriangleStream<GsOutGeomvel>GSOut)
{
	uint ii = input[0].ppos.w;
	uint s = input[0].bufferdata.x;

	//// current ////

	GStmp evenring[4];
	// pos
	evenring[0].pos = input[0].cpoint.xyz;
	evenring[1].pos = input[0].cpoint.xyz + input[0].norm * mcps_Thickness(McpsData, ii, s);
	evenring[2].pos = input[0].cpoint.xyz * mcps_Radius2(McpsData, ii, s) + input[0].norm * mcps_Thickness(McpsData, ii, s);
	evenring[2].pos.z += mcps_Depth(McpsData, ii, s);
	evenring[3].pos = input[0].cpoint.xyz * mcps_Radius2(McpsData, ii, s);
	evenring[3].pos.z += mcps_Depth(McpsData, ii, s);
	// txcd
	evenring[0].txcd = float2(input[0].TexCd, 0);
	evenring[1].txcd = float2(input[0].TexCd, 1);
	evenring[2].txcd = float2(input[0].TexCd, 0);
	evenring[3].txcd = float2(input[0].TexCd, 1);
	
	GStmp oddring[4];
	// pos
	oddring[0].pos = input[1].cpoint.xyz;
	oddring[1].pos = input[1].cpoint.xyz + input[1].norm * mcps_Thickness(McpsData, ii, s);
	oddring[2].pos = input[1].cpoint.xyz * mcps_Radius2(McpsData, ii, s) + input[1].norm * mcps_Thickness(McpsData, ii, s);
	oddring[2].pos.z += mcps_Depth(McpsData, ii, s);
	oddring[3].pos = input[1].cpoint.xyz * mcps_Radius2(McpsData, ii, s);
	oddring[3].pos.z += mcps_Depth(McpsData, ii, s);
	// txcd
	oddring[0].txcd = float2(input[1].TexCd, 0);
	oddring[1].txcd = float2(input[1].TexCd, 1);
	oddring[2].txcd = float2(input[1].TexCd, 0);
	oddring[3].txcd = float2(input[1].TexCd, 1);

	// norm
	float3 eosnorm = 0;
	float3 eosnorm0 = evenring[0].pos-evenring[3].pos;
	float3 eosnorm1 = evenring[0].pos-oddring[3].pos;
	eosnorm = normalize(cross(eosnorm0,eosnorm1));
	float3 eisnorm = 0;
	float3 eisnorm0 = evenring[1].pos-evenring[2].pos;
	float3 eisnorm1 = evenring[1].pos-oddring[2].pos;
	eisnorm = normalize(cross(eisnorm0,eisnorm1));
	float3 efwnorm = 0;
	float3 efwnorm0 = evenring[0].pos-evenring[1].pos;
	float3 efwnorm1 = evenring[0].pos-oddring[1].pos;
	efwnorm = normalize(cross(efwnorm0,efwnorm1));
	float3 ebwnorm = 0;
	float3 ebwnorm0 = evenring[2].pos-evenring[3].pos;
	float3 ebwnorm1 = evenring[2].pos-oddring[3].pos;
	ebwnorm = normalize(cross(ebwnorm0,ebwnorm1));

	float3 oosnorm = 0;
	float3 oosnorm0 = oddring[0].pos-oddring[3].pos;
	float3 oosnorm1 = oddring[0].pos-evenring[3].pos;
	oosnorm = normalize(cross(oosnorm0,oosnorm1));
	float3 oisnorm = 0;
	float3 oisnorm0 = oddring[1].pos-oddring[2].pos;
	float3 oisnorm1 = oddring[1].pos-evenring[2].pos;
	oisnorm = normalize(cross(oisnorm0,oisnorm1));
	float3 ofwnorm = 0;
	float3 ofwnorm0 = oddring[0].pos-oddring[1].pos;
	float3 ofwnorm1 = oddring[0].pos-evenring[1].pos;
	ofwnorm = normalize(cross(ofwnorm0,ofwnorm1));
	float3 obwnorm = 0;
	float3 obwnorm0 = oddring[2].pos-oddring[3].pos;
	float3 obwnorm1 = oddring[2].pos-evenring[3].pos;
	obwnorm = normalize(cross(obwnorm0,obwnorm1));

	//// previous ////

	float3 pevenring[4];
	pevenring[0] = input[0].ppos.xyz;
	pevenring[1] = input[0].ppos.xyz + input[0].norm * mcps_Thickness(PrevMcpsData, ii, s);
	pevenring[2] = input[0].ppos.xyz * mcps_Radius2(PrevMcpsData, ii, s) + input[0].norm * mcps_Thickness(PrevMcpsData, ii, s);
	pevenring[2].z += mcps_Depth(PrevMcpsData, ii, s);
	pevenring[3] = input[0].ppos.xyz * mcps_Radius2(PrevMcpsData, ii, s);
	pevenring[3].z += mcps_Depth(PrevMcpsData, ii, s);
	
	float3 poddring[4];
	poddring[0] = input[1].ppos.xyz;
	poddring[1] = input[1].ppos.xyz + input[1].norm * mcps_Thickness(PrevMcpsData, ii, s);
	poddring[2] = input[1].ppos.xyz * mcps_Radius2(PrevMcpsData, ii, s) + input[1].norm * mcps_Thickness(PrevMcpsData, ii, s);
	poddring[2].z += mcps_Depth(PrevMcpsData, ii, s);
	poddring[3] = input[1].ppos.xyz * mcps_Radius2(PrevMcpsData, ii, s);
	poddring[3].z += mcps_Depth(PrevMcpsData, ii, s);

	//// transform ////
	for(uint i=0; i<4; i++)
	{
		evenring[i].pos = mul(float4(evenring[i].pos,1),QRotate(mcps_Rotation(McpsData, ii, s))).xyz;
		evenring[i].pos += mcps_position(McpsData, ii, s);
		oddring[i].pos = mul(float4(oddring[i].pos,1),QRotate(mcps_Rotation(McpsData, ii, s))).xyz;
		oddring[i].pos += mcps_position(McpsData, ii, s);
	}
	//// join ////

	GsOutGeomvel v = (GsOutGeomvel)0;
	GsOutGeomvel vle = (GsOutGeomvel)0;
	GsOutGeomvel vlo = (GsOutGeomvel)0;
	// ....
	// o...
	v.cpoint = float4(evenring[0].pos,1);
	v.norm =   (eosnorm+efwnorm)/2;
	v.TexCd =  float4(evenring[0].txcd,0,1);
	v.ppos =   float4(pevenring[0],ii);
	vle = v;
	GSOut.Append(v);
	// o...
	// ....
	v.cpoint = float4(oddring[0].pos,1);
	v.norm =   (-oosnorm-ofwnorm)/2;
	v.TexCd =  float4(oddring[0].txcd,0,1);
	v.ppos =   float4(poddring[0],ii);
	vlo = v;
	GSOut.Append(v);
	// ....
	// .o..
	v.cpoint = float4(evenring[1].pos,1);
	v.norm =   (eisnorm+efwnorm)/2;
	v.TexCd =  float4(evenring[1].txcd,0,1);
	v.ppos =   float4(pevenring[1],ii);
	GSOut.Append(v);
	// .o..
	// ....
	v.cpoint = float4(oddring[1].pos,1);
	v.norm =   (-oisnorm-ofwnorm)/2;
	v.TexCd =  float4(oddring[1].txcd,0,1);
	v.ppos =   float4(poddring[1],ii);
	GSOut.Append(v);
	// ....
	// ..o.
	v.cpoint = float4(evenring[2].pos,1);
	v.norm =   (eisnorm+ebwnorm)/2;
	v.TexCd =  float4(evenring[2].txcd,0,1);
	v.ppos =   float4(pevenring[2],ii);
	GSOut.Append(v);
	// ..o.
	// ....
	v.cpoint = float4(oddring[2].pos,1);
	v.norm =   (-oisnorm-obwnorm)/2;
	v.TexCd =  float4(oddring[2].txcd,0,1);
	v.ppos =   float4(poddring[2],ii);
	GSOut.Append(v);
	// ....
	// ...o
	v.cpoint = float4(evenring[3].pos,1);
	v.norm =   (eosnorm+ebwnorm)/2;
	v.TexCd =  float4(evenring[3].txcd,0,1);
	v.ppos =   float4(pevenring[3],ii);
	GSOut.Append(v);
	// ...o
	// ....
	v.cpoint = float4(oddring[3].pos,1);
	v.norm =   (-oosnorm-obwnorm)/2;
	v.TexCd =  float4(oddring[3].txcd,0,1);
	v.ppos =   float4(poddring[3],ii);
	GSOut.Append(v);
	GSOut.Append(vle);
	GSOut.Append(vlo);
	GSOut.RestartStrip();
	if(input[0].bufferdata.z == 0)
	{
		float4 jump = float4(1,2,-1,-1);
		uint wi = 0;
		for(uint i=0; i<4; i++)
		{
			v.cpoint = float4(evenring[wi].pos,1);
			v.norm =   float3(0,0,1);
			v.TexCd =  float4(evenring[wi].txcd,0,1);
			v.ppos =   float4(pevenring[wi],ii);
			GSOut.Append(v);
			wi += jump[i];
		}
	}
	if(input[1].bufferdata.z == (input[1].bufferdata.y-1))
	{
		float4 jump = float4(1,2,-1,-1);
		uint wi = 0;
		for(uint i=0; i<4; i++)
		{
			v.cpoint = float4(oddring[wi].pos,1);
			v.norm =   float3(0,0,1);
			v.TexCd =  float4(oddring[wi].txcd,0,1);
			v.ppos =   float4(poddring[wi],ii);
			GSOut.Append(v);
			wi += jump[i];
		}
	}
}
GeometryShader StreamGeomvel = ConstructGSWithSO( CompileShader( gs_5_0, GsGeomvel() ), GEOMVEL );
technique11 GeomvelLayout
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VsGeomvel() ) );
		SetGeometryShader( CompileShader( gs_5_0, GsGeomvel() ) );
	    SetGeometryShader( StreamGeomvel );

	}
}