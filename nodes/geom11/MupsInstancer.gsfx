#include "../../../mp.fxh/mupsRead.fxh"
#include "../../../mp.fxh/quaternion.fxh"
#include "../../../mp.fxh/pows.fxh"

//define STACK
//define STACKTRI

#if !defined(STACK)
#define STACK 1
#define STACKTRI 3
#endif

#if !defined(PREVPOS_OUT)
#define PREVPOS_OUT 1
#endif
#if !defined(SUBSETID_OUT)
#define SUBSETID_OUT 1
#endif

#include "../../../mp.fxh/MREInputElements.fxh"

ByteAddressBuffer MupsData;
ByteAddressBuffer PrevMupsData;

float GrowTime = 1;
bool Grow = true;
float4x4 PreTransform;

GSin VS(VSin input)
{
    GSin output;

	uint ci = ii * STACK;

    output.cpoint = mul(float4(input.cpoint, 1), PreTransform).xyz;
	output.norm = mul(float4(input.norm, 0), PreTransform).xyz;
    #if defined(PREVPOS_IN)
        output.PrevPos = mul(float4(input.PrevPos, 1), PreTransform).xyz;
    #else
        output.PrevPos = output.cpoint;
    #endif
    output.SubsetID = ci;

    #if defined(TEXCOORD_IN) && defined(TEXCOORD_OUT)
        output.TexCd = input.TexCd;
    #endif
    #if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
        output.Tangent = input.Tangent;
        output.Binormal = input.Binormal;
    #endif
    #if defined(BLENDWEIGHTS_IN) && defined(BLENDWEIGHTS_OUT)
        output.BlendId = input.BlendId;
        output.BlendWeight = input.BlendWeight;
    #endif

    return output;
}

struct GsOutGeomvel
{
	float4 cpoint : SV_Position;
	float3 norm : NORMAL;
	float4 TexCd : TEXCOORD0;
	float4 ppos : COLOR0;
};

[maxvertexcount(STACKTRI)]
void GS(triangle GSin input[3], inout TriangleStream<GsOutGeomvel>GSOut)
{
	GsOutGeomvel o = (GsOutGeomvel)0;
	[unroll]
	for(uint i=0; i<STACK; i++)
	{
		uint pi = input[0].SubsetID + i;

		//// current ////
		float3 pos = mupsPositionLoad(MupsData, pi);
		float2 age = mupsAgeLoad(MupsData, pi);
		float3 ppos = mupsPositionLoad(PrevMupsData, pi);
		float2 page = mupsAgeLoad(PrevMupsData, pi);

        #if defined(KNOW_SIZE)
    		float size = mupsSizeLoad(MupsData, pi);
            float psize = mupsSizeLoad(PrevMupsData, pi);
        #endif
        #if defined(KNOW_SCALE)
    		float3 scale = mupsScaleLoad(MupsData, pi);
            float3 pscale = mupsScaleLoad(PrevMupsData, pi);
        #endif
        #if defined(KNOW_ROTATION)
    		float4 rot = mupsRotationLoad(MupsData, pi);
    		float4x4 rotm = qrot(rot);
    		float4 prot = mupsRotationLoad(PrevMupsData, pi);
    		float4x4 protm = qrot(prot);
        #endif

		[unroll]
		for(uint j=0; j<3; j++)
		{
			//// current ////
			float3 cpos = input[j].cpoint;
			float3 pcpos = input[j].PrevPos;
			float3 cnorm = input[j].norm;
            #if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
                float3 tangent = input[j].Tangent;
                float3 binormal = input[j].Binormal;
            #endif
            #if defined(KNOW_SIZE)
                cpos.xyz *= size;
    			pcpos.xyz *= psize;
            #endif
            #if defined(KNOW_SCALE)
                cpos.xyz *= scale;
            #endif
            #if defined(KNOW_ROTATION)
                cpos = mul(cpos, rotm);
    			pcpos = mul(pcpos, protm);

                cnorm = mul(float4(cnorm, 0), rotm).xyz;
                #if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
                    tangent = mul(float4(tangent, 0), rotm).xyz;
                    binormal = mul(float4(binormal, 0), rotm).xyz;
                #endif
            #endif

			cpos += pos;
			pcpos += ppos;
            o.cpoint = cpos;
            o.PrevPos = pcpos;
            o.norm = cnorm;

            #if defined(TEXCOORD_IN) && defined(TEXCOORD_OUT)
                o.TexCd = input[j].TexCd;
            #endif
            #if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
                o.Tangent = tangent;
                o.Binormal = binormal;
            #endif
            #if defined(BLENDWEIGHTS_IN) && defined(BLENDWEIGHTS_OUT)
                o.BlendId = input[j].BlendId;
                o.BlendWeight = input[j].BlendWeight;
            #endif

			o.SubsetID = pi;
			if(age.x < 2) o.PrevPos = o.cpoint;
			GSOut.Append(o);
		}
		GSOut.RestartStrip();
	}
}

GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( gs_5_0, GS() ),
	"POSITION.xyz;"
	"NORMAL.xyz"
	#if defined(TEXCOORD_OUT)
		";TEXCOORD0.xy"
	#endif
	#if defined(TANGENTS_OUT)
		";TANGENT.xyz"
		";BINORMAL.xyz"
	#endif
	#if defined(BLENDWEIGHTS_OUT)
		";BLENDINDICES.xyzw"
		";BLENDWEIGHT.xyzw"
	#endif
	#if defined(PREVPOS_OUT)
		";PREVPOS.xyz"
	#endif
	#if defined(SUBSETID_OUT)
		";SUBSETID.x"
	#endif
);

technique11 geom
{
	pass P0
	{

		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
	    SetGeometryShader( StreamOutGS );
	}
}
