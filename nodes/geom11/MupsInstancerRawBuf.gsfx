#include "../../../mp.fxh/mupsRead.fxh"
#include "../../../mp.fxh/pows.fxh"
#include "../../../mp.fxh/quaternion.fxh"

//define STACK
//define STACKTRI

#if !defined(STACK)
#define STACK 1
#define STACKTRI 3
#endif

#if !defined(SUBSETID_OUT)
#define SUBSETID_OUT 1
#endif

#include "../../../mp.fxh/MREInputElements.fxh"

ByteAddressBuffer Geometry;
ByteAddressBuffer MupsData;
ByteAddressBuffer PrevMupsData;

cbuffer cbuf
{
	float4x4 PreTransform;
	uint nofpv = 3;
	uint TangentOffs = 0;
	uint BimormOffs = 0;
	uint BlendIDOffs = 0;
	uint BlendWeightOffs = 0;
	uint PrevPosOffs = 0;
};
struct null
{
	uint vid : SV_VertexID;
	uint iid : SV_InstanceID;
};

GSin VS(null input)
{
    GSin output;

	uint ci = input.iid * STACK;
	uint vi = input.vid * nofpv;
	float3 pos = BABLoad3(Geometry, vi);
	float3 norm = BABLoad3(Geometry, vi + 3);

    output.cpoint = mul(float4(pos, 1), PreTransform).xyz;
	output.norm = mul(float4(norm, 0), PreTransform).xyz;
    #if defined(PREVPOS_OUT)
	    #if defined(PREVPOS_IN)
			float3 ppos = BABLoad3(Geometry, vi + PrevPosOffs);
	        output.PrevPos = mul(float4(ppos, 1), PreTransform).xyz;
	    #else
	        output.PrevPos = output.cpoint;
	    #endif
	#endif
    output.SubsetID = ci;

    #if defined(TEXCOORD_IN) && defined(TEXCOORD_OUT)
        output.TexCd = BABLoad2(Geometry, vi + 6);
    #endif
    #if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
		float3 tn = BABLoad3(Geometry, vi + TangentOffs);
		float3 bn = BABLoad3(Geometry, vi + BimormOffs);
        output.Tangent = mul(float4(tn, 0), PreTransform).xyz;
        output.Binormal = mul(float4(bn, 0), PreTransform).xyz;
    #endif
    #if defined(BLENDWEIGHTS_IN) && defined(BLENDWEIGHTS_OUT)
        output.BlendId = BABLoad4(Geometry, vi + BlendIDOffs);
        output.BlendWeight = BABLoad4(Geometry, vi + BlendWeightOffs);
    #endif

    return output;
}

[maxvertexcount(STACKTRI)]
void GS(triangle GSin input[3], inout TriangleStream<GSin>GSOut)
{
	GSin o = (GSin)0;
	[unroll]
	for(uint i=0; i<STACK; i++)
	{
		uint pi = input[0].SubsetID + i;

		//// current ////
		float3 pos = mupsPositionLoad(MupsData, pi);
		float2 age = mupsAgeLoad(MupsData, pi);
		#if defined(PREVPOS_OUT)
			float3 ppos = mupsPositionLoad(PrevMupsData, pi);
			float2 page = mupsAgeLoad(PrevMupsData, pi);
		#endif

        #if defined(KNOW_SIZE)
    		float size = mupsSizeLoad(MupsData, pi);
			#if defined(PREVPOS_OUT)
            	float psize = mupsSizeLoad(PrevMupsData, pi);
			#endif
        #endif
        #if defined(KNOW_SCALE)
    		float3 scale = mupsScaleLoad(MupsData, pi);
			#if defined(PREVPOS_OUT)
            	float3 pscale = mupsScaleLoad(PrevMupsData, pi);
			#endif
        #endif
        #if defined(KNOW_ROTATION)
    		float4 rot = mupsRotationLoad(MupsData, pi);
    		float4x4 rotm = qrot(rot);
			#if defined(PREVPOS_OUT)
	    		float4 prot = mupsRotationLoad(PrevMupsData, pi);
	    		float4x4 protm = qrot(prot);
			#endif
        #endif

		[unroll]
		for(uint j=0; j<3; j++)
		{
			//// current ////
			float3 cpos = input[j].cpoint;
			#if defined(PREVPOS_OUT)
				float3 pcpos = input[j].PrevPos;
			#endif
			float3 cnorm = input[j].norm;
            #if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
                float3 tangent = input[j].Tangent;
                float3 binormal = input[j].Binormal;
            #endif
            #if defined(KNOW_SIZE)
                cpos.xyz *= size;
				#if defined(PREVPOS_OUT)
    				pcpos.xyz *= psize;
				#endif
            #endif
            #if defined(KNOW_SCALE)
                cpos.xyz *= scale;
				#if defined(PREVPOS_OUT)
    				pcpos.xyz *= pscale;
				#endif
            #endif
            #if defined(KNOW_ROTATION)
                cpos = mul(float4(cpos,1), rotm).xyz;
				#if defined(PREVPOS_OUT)
    				pcpos = mul(float4(pcpos,1), protm).xyz;
				#endif
                cnorm = mul(float4(cnorm, 0), rotm).xyz;
                #if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
                    tangent = mul(float4(tangent, 0), rotm).xyz;
                    binormal = mul(float4(binormal, 0), rotm).xyz;
                #endif
            #endif

			cpos += pos;
            o.cpoint = cpos;
			#if defined(PREVPOS_OUT)
				pcpos += ppos;
            	o.PrevPos = pcpos;
				if(age.x < 2) o.PrevPos = o.cpoint;
			#endif
            o.norm = cnorm;

            #if defined(TEXCOORD_IN) && defined(TEXCOORD_OUT)
                o.TexCd = input[j].TexCd;
            #endif
            #if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
                o.Tangent = tangent;
                o.Binormal = binormal;
            #endif
            #if defined(BLENDWEIGHTS_IN) && defined(BLENDWEIGHTS_OUT)
                o.BlendId = input[j].BlendId;
                o.BlendWeight = input[j].BlendWeight;
            #endif

			o.SubsetID = pi;
			GSOut.Append(o);
		}
		GSOut.RestartStrip();
	}
}

GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( gs_5_0, GS() ),
	"POSITION.xyz;"
	"NORMAL.xyz"
	#if defined(TEXCOORD_OUT)
		";TEXCOORD0.xy"
	#endif
	#if defined(TANGENTS_OUT)
		";TANGENT.xyz"
		";BINORMAL.xyz"
	#endif
	#if defined(BLENDWEIGHTS_OUT)
		";BLENDINDICES.xyzw"
		";BLENDWEIGHT.xyzw"
	#endif
	#if defined(PREVPOS_OUT)
		";PREVPOS.xyz"
	#endif
	#if defined(SUBSETID_OUT)
		";SUBSETID.x"
	#endif
);

technique11 geom
{
	pass P0
	{

		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
	    SetGeometryShader( StreamOutGS );
	}
}
