//@author: martins upitis
//@help: Screen Space Ambien Occlusuion
//@tags: post
//@credits: antokhio

struct vs2ps { float4 PosWVP: SV_POSITION; float2 uv: TEXCOORD0;};
SamplerState sLinear: IMMUTABLE {AddressU=Wrap;AddressV=Wrap;};


Texture2D bgl_RenderedTexture : register(t0):PREVIOUS; 
Texture2D bgl_DepthTexture;

float4x4 tP <string uiname="Projection";>;

float2 R:TARGETSIZE; 

#define PI    3.14159265

//------------------------------------------
//general stuff

//make sure that these two values are the same for your camera, otherwise distances will be wrong.

//float znear = 0.3; //Z-near
//float zfar = 40.0; //Z-far

//user variables
int samples = 16; //ao sample count

float radius = 3.0; //ao radius
float aoclamp = 0.25; //depth clamp - reduces haloing at screen edges
bool noise = true; //use noise instead of pattern for sample dithering
float noiseamount = 0.0002; //dithering amount

float diffarea = 0.4; //self-shadowing reduction
float gdisplace = 0.4; //gauss bell center

bool mist = true; //use mist?
float miststart = 0.0; //mist start
float mistend = 16.0; //mist end

bool onlyAO = false; //use only ambient occlusion pass?
float lumInfluence = 0.7; //how much luminance affects occlusion

//float zfar (tP._43 / (1 - tP._33)
//float znear(-tP._43 / tP._33)

float2 rand(float2 coord) //generating noise/pattern texture for dithering
{
	float noiseX = ((frac(1.0-coord.x*(R.x/2.0))*0.25)+(frac(coord.y*(R.y/2.0))*0.75))*2.0-1.0;
	float noiseY = ((frac(1.0-coord.x*(R.x/2.0))*0.75)+(frac(coord.y*(R.y/2.0))*0.25))*2.0-1.0;
	
	if (noise)
	{
		noiseX = clamp(frac(sin(dot(coord ,float2 (12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;
		noiseY = clamp(frac(sin(dot(coord ,float2 (12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;
	}
	return float2(noiseX,noiseY)*noiseamount;
}
float doMist(float2 coord)
{
	float zdepth = bgl_DepthTexture.SampleLevel(sLinear,coord.xy,0).x;
	//float depth = -zfar * znear / (zdepth * (zfar - znear) - zfar);
	float depth = -(tP._43 / (1 - tP._33)) * (-tP._43 / tP._33) / (zdepth * ((tP._43 / (1 - tP._33)) - (-tP._43 / tP._33)) - (tP._43 / (1 - tP._33)));
	return clamp((depth-miststart)/mistend,0.0,1.0);
}

float readDepth(in float2 coord) 
{
	if (coord.x<0.0||coord.y<0.0) return 1.0;
	//return (2.0 * znear) / (zfar + znear - bgl_DepthTexture.SampleLevel(sLinear, coord,0 ).x * (zfar-znear));
	return (2.0 * (-tP._43 / tP._33)) / ((tP._43 / (1 - tP._33)) + (-tP._43 / tP._33) - bgl_DepthTexture.SampleLevel(sLinear, coord,0 ).x * ((tP._43 / (1 - tP._33))-(-tP._43 / tP._33)));
	
	

}

float compareDepths(in float depth1, in float depth2,inout int far)
{   
	float garea = 2.0; //gauss bell width    
	float diff = (depth1 - depth2)*100.0; //depth difference (0-100)
	//reduce left bell width to avoid self-shadowing 
	if (diff<gdisplace)
	{
	garea = diffarea;
	}else{
	far = 1;
	}
	
	float gauss = pow(2.7182,-2.0*(diff-gdisplace)*(diff-gdisplace)/(garea*garea));
	return gauss;
}   

float calAO(float2 uv, float depth,float dw, float dh)
{   
	float dd = (1.0-depth)*radius;
	
	float temp = 0.0;
	float temp2 = 0.0;
	float coordw = uv.x + dw*dd;
	float coordh = uv.y + dh*dd;
	float coordw2 = uv.x - dw*dd;
	float coordh2 = uv.y - dh*dd;
	
	float2 coord = float2(coordw , coordh);
	float2 coord2 = float2(coordw2, coordh2);
	
	int far = 0;
	temp = compareDepths(depth, readDepth(coord),far);
	//DEPTH EXTRAPOLATION:
	if (far > 0)
	{
		temp2 = compareDepths(readDepth(coord2),depth,far);
		temp += (1.0-temp)*temp2;
	}
	
	return temp;
} 

float4 PassThrough(vs2ps input): SV_Target
{
   	
	float2 noise = rand(input.uv);
	float depth = readDepth(input.uv);
	
	float w = (1.0 / R.x)/clamp(depth,aoclamp,1.0)+(noise.x*(1.0-noise.x));
	float h = (1.0 / R.y)/clamp(depth,aoclamp,1.0)+(noise.y*(1.0-noise.y));
	
	float pw;
	float ph;
	
	float ao;
	
	float dl = PI*(3.0-sqrt(5.0));
	float dz = 1.0/float(samples);
	float l = 0.0;
	float z = 1.0 - dz/2.0;
	
	for (int i = 0; i <= samples; i ++)
	{     
		float r = sqrt(1.0-z);
		
		pw = cos(l)*r;
		ph = sin(l)*r;
		ao += calAO(input.uv,depth,pw*w,ph*h);        
		z = z - dz;
		l = l + dl;
	}
	
	ao /= float(samples);
	ao = 1.0-ao;	
	
	if (mist)
	{
	ao = lerp(ao, 1.0,doMist(input.uv));
	}
	
	float3 color = bgl_RenderedTexture.SampleLevel(sLinear,input.uv,0).rgb;
	
	float3 lumcoeff = float3(0.299,0.587,0.114);
	float lum = dot(color.rgb, lumcoeff);
	float3 luminance = float3(lum, lum, lum);
	
	float3 final = float3(color*lerp(ao,1.0,luminance*lumInfluence));//mix(color*ao, white, luminance)
	
	if (onlyAO)
	{
	final = float3(lerp( ao ,1.0,luminance*lumInfluence)); //ambient occlusion only
	}
	
	
	return float4(final,1.0); 
	
}

technique10 Template 
{
	pass P0 
	{ SetPixelShader(CompileShader(ps_4_0, PassThrough())); }
} 